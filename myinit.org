#+STARTUP:  overview
#+PROPERTY: header-args :comments yes :results silent

* repos
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

* interface tweaks
  - Do not show the startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

  - Always ask y-or-n-p
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

  - Turn off the menubar, toolbar, and scroll-bars
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)
#+END_SRC

  - Prevent Extraneous Tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC
 
  - Increase font size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :height (+ (face-attribute 'default :height) 30))
#+END_SRC

  - fill-column-indicator
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :config (progn
            (setq fci-rule-color "#EFEFAF")
            (add-hook 'after-change-major-mode-hook 'fci-mode)))
#+END_SRC

* backups
#+BEGIN_SRC emacs-lisp
;; Store backups in ~/.emacs.d/backups/
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))

;; Revert the changes and go back to the saved version of the file
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* savefiles directory
  - common directory for saveplace and recentf
#+BEGIN_SRC emacs-lisp
(defconst savefiles-dir (expand-file-name "savefiles" user-emacs-directory))
#+END_SRC

* saveplace
  - Remembers your location in a file when saving files
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :config (progn
            (setq save-place-file (expand-file-name "saveplace" savefiles-dir))
            (save-place-mode 1)))
#+END_SRC

* recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :bind   ("C-x C-r" . recentf-open-files)
  :config (progn
            (setq recentf-save-file (expand-file-name "recentf" savefiles-dir))
            (setq recentf-max-menu-items 25)
            (recentf-mode 1)))
#+END_SRC

* projectile
  #+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind-keymap ("C-c p" . projectile-command-map)
    :config (progn 
              (setq projectile-sort-order 'recentf)
              (projectile-mode 1)))
  #+END_SRC

* helm
# #+BEGIN_SRC emacs-lisp
#   (use-package helm
#     :bind   ("C-x C-f" . helm-find-files)
#     :config (helm-mode 1))
# #+END_SRC

* helm-projectile
# #+BEGIN_SRC emacs-lisp
# (use-package helm-projectile
#   :diminish projectile-mode
#   :bind ("C-c p p" . helm-projectile-switch-project)
#   :init (use-package helm-ag)
#   :config (progn 
#             (projectile-global-mode t)
#             (helm-projectile-on)))
# #+END_SRC

* neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :bind   ("M-n" . neotree-toggle)
  ;; jump to the current file node on opening
  :init   (setq neo-smart-open t)
  :config (progn
            (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
            (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
            (evil-define-key 'normal neotree-mode-map (kbd "c") 'neotree-create-node)
            (evil-define-key 'normal neotree-mode-map (kbd "r") 'neotree-rename-node)
            (evil-define-key 'normal neotree-mode-map (kbd "d") 'neotree-delete-node)
            (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
            (evil-define-key 'normal neotree-mode-map (kbd "j") 'neotree-next-line)
            (evil-define-key 'normal neotree-mode-map (kbd "k") 'neotree-previous-line)
            (evil-define-key 'normal neotree-mode-map (kbd "h") 'neotree-hidden-file-toggle)))
#+END_SRC

* lisp
#+BEGIN_SRC emacs-lisp
;; Allow one to see matching pairs of parentheses and other characters
(show-paren-mode 1)
#+END_SRC

* eldoc
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :config (global-eldoc-mode))
#+END_SRC

* exec-path-from-shell
#+BEGIN_SRC emacs-lisp
;; Copy $PATH from the user's shell
(use-package exec-path-from-shell
  :if     (memq window-system '(mac ns x))
  :config (exec-path-from-shell-initialize))
#+END_SRC

* bind-key
#+BEGIN_SRC emacs-lisp
;; M-x describe-personal-keybindings
(use-package bind-key)
#+END_SRC

* which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config (which-key-mode))
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
;; M-x try
(use-package try)
#+END_SRC

* undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config (global-undo-tree-mode))
#+END_SRC

* evil
#+BEGIN_SRC emacs-lisp
  ;; requires goto-chg and undo-tree
  ;; Use C-z to switch among <E> emacs-mode <N> normal-mode <I> insert-mode
  (use-package evil
    :config (progn
              (setq evil-default-state 'emacs)
              (evil-mode 1)))
#+END_SRC

* evil-nerd-commenter
#+BEGIN_SRC emacs-lisp
;; comment/uncomment lines
;; "M-:" in all modes and ",cl" in <E>
(use-package evil-nerd-commenter
  :config (evilnc-default-hotkeys))
#+END_SRC

* smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config (add-hook 'emacs-lisp-mode-hook 'smartparens-strict-mode))
#+END_SRC

* rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :init (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

* aggressive-indent  
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent)
#+END_SRC

* clojure-mode  
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :config (progn
            (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
            (add-hook 'clojure-mode-hook 'smartparens-strict-mode)
            (add-hook 'clojure-mode-hook 'aggressive-indent-mode)))
#+END_SRC

* cider
#+BEGIN_SRC emacs-lisp
(use-package cider
  :config (setq cider-repl-display-help-banner nil
                cider-repl-pop-to-buffer-on-connect nil))
#+END_SRC

# * inf-clojure
# #+BEGIN_SRC emacs-lisp
# (use-package inf-clojure
#   :config (progn
#             (setf inf-clojure-tools-deps-cmd '("localhost" . 5555))
#             (add-hook 'clojure-mode-hook 'inf-clojure-minor-mode)))
# #+END_SRC

* magit  
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)))
#+END_SRC

* company
#+BEGIN_SRC emacs-lisp
(use-package company
  :bind (("TAB" . company-indent-or-complete-common))
  :config (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

* uuidgen  
#+BEGIN_SRC emacs-lisp
(use-package uuidgen)
#+END_SRC

* multiple-cursors  
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors)
#+END_SRC

* web-mode 
#+BEGIN_SRC emacs-lisp
(use-package web-mode)
#+END_SRC

* markdown-mode 
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
#+END_SRC

* theme
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :config (load-theme 'zenburn t))
#+END_SRC
